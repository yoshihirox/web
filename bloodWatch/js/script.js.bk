(function(){
	
	var gl;
	var canvas;
	var shaderProgram;
	var triangleVertexBuffer;
	
	function createGLContext(canvas){
		var names = ["webgl", "experimental-webgl"];
		var context = null;
		for(var i=0; i< names.length; i++){
			try{
				context = canvas.getContext(names[i]);
			}catch(e){}
			if(context){
				break;
			}
		}
		if(context){
			context.viewportWidth = canvas.width;
			context.viewportHeight = canvas.height;
		}else {
			alert("Failed to create WebGL context!");
		}
		return context;
	}
	
	function loadShaderFromDOM(id){
		var shaderScript = document.getElementById(id);
		if(!shaderScript){
			return null;
		}
		var shaderSource = "";
		var currentChild = shaderScript.firstChild;
		while(currentChild){
			if(currentChild.nodeType == 3){
				shaderSource += currentChild.textContent;
			}
			currentChild = currentChild.nextSibling;
		}	
		var shader;
		if(shaderScript.type == "x-shader/x-fragment"){
			shader = gl.createShader(gl.FRAGMENT_SHADER);
		}else if(shaderScript.type == "x-shader/x-vertex"){
			shader = gl.createShader(gl.VERTEX_SHADER);
		}else{
			return null;
		}
		
		gl.shaderSource(shader, shaderSource);
		gl.compileShader(shader);
		
		return shader;
	}
	
	function setupShaders(){
		vertexShader = loadShaderFromDOM("shader-vs");
		fragmentShader = loadShaderFromDOM("shader-fs");
		shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, vertexShader);
		gl.attachShader(shaderProgram, fragmentShader);
		gl.linkProgram(shaderProgram);
		
		if(!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)){
			alert("Failed to setup sahders");
		}
		gl.useProgram(shaderProgram);
		
		shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
		shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
		
		gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
		
	}
	
}());

